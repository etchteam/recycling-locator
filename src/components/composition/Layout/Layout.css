/**
  * 3 possible layout variations.
  * 1. Sticky header + Main
  *   - Main is scrollable on all screen sizes
  *   - Whilst main is scrollable the layout needs a fixed height
  * 2. Sticky header + Main + Aside
  *   - Main is scrollable on large screen only
  *   - Main and aside stack on small screen, so to make them both sit in
        the same scroll area overflow isn't applied to main
  * 3. Standalone
  *   - Height needs to break out of the container
  */
locator-layout {
  display: grid;
  grid-template-areas:
    'header'
    'main'
    'aside';
  grid-template-rows: auto 1fr auto;
  min-height: var(--container-height);

  .recycling-locator-variant-standalone & {
    min-height: 100cqh;
  }

  &:not(:has([slot='layout-aside'])) {
    height: var(--container-height);

    .recycling-locator-variant-standalone & {
      height: 100cqh;
    }
  }

  @container (width >= 768px) {
    grid-template-rows: auto 1fr;
    height: var(--container-height);

    .recycling-locator-variant-standalone & {
      height: 100cqh;
    }

    &:has([slot='layout-aside']) {
      grid-template-areas:
        'header aside'
        'main aside';
      grid-template-columns: 1fr 1fr;
    }
  }

  &::part(header),
  &::part(main),
  &::part(aside) {
    min-width: 0;
  }

  &::part(header) {
    background: var(--diamond-color-white);
    border-bottom: var(--diamond-border);
    grid-area: header;
    position: sticky;
    top: 0;
    z-index: 1;
  }

  &::part(main) {
    grid-area: main;
    position: relative;
  }

  &:not(:has([slot='layout-aside']))::part(main) {
    overflow-y: auto;
  }

  &::part(aside) {
    grid-area: aside;
    position: relative;
  }

  [slot='layout-aside'] locator-places-map {
    /* Maps need to take up a minimum amount of space when placed in the layout aside */
    min-height: 30rem;
  }

  @container (width >= 768px) {
    &:has([slot='layout-aside'])::part(main) {
      overflow-y: auto;
    }

    &::part(aside) {
      height: 100%;
    }
  }
}
